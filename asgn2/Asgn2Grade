Name:            'Mai, Jordan'
CruzID:          'jmai12'
Commit Graded:   '2dfd3b337f91cad04680f55ce09a83703e16d949'
Late Days Used:  0
Score:           86.00/100


Functional (51/60)

Design Document (15/18)
    -Project Description    (3/3)
    -Program Logic          (3/3)
    -Data Structures        (3/3)
    -Functions              (3/3)
    -Questions              (3/3)
    -Testing                (0/3)

Code Style (5/5)


Functional Tests Output:
Skipping assignment asgn0: date not 12:01AM March 31-03:00AM April 16.
Skipping assignment asgn1: date not 12:00AM April 13-11:59PM May 05.

========> Checking asgn2 now (2021-05-23 19:21:38.990284) ==================================
------ Checking for files before running commands ------
Files OK
----- Running commands:
cd asgn2; echo '-- Files in asgn2 --' ; ls ; echo '-- Running make --' ; make
------ Command output ------
-- Files in asgn2 --
DESIGN.pdf
httpserver.c
Makefile
README.md
-- Running make --
clang -Wall -Wextra -Wpedantic -Wshadow -std=c11 -c httpserver.c -g
clang -Wall -Wextra -Wpedantic -Wshadow -std=c11 -o httpserver httpserver.o -g -lpthread
------ End command output ------
------ Checking for files after running commands ------
Files OK
.......................................................
++++ Your submission has met minimum requirements for assignment asgn2.
++++ You may submit commit ID 2dfd3b337f91cad04680f55ce09a83703e16d949 for asgn2.
.......................................................
<======== Done checking asgn2 (2021-05-23 19:21:39.072381)


========> Running test script for asgn2 (2021-05-23 19:21:39.072485) <================
--> Building ...succeeded!
--------> Running asgn2.test.01 (GET a small binary file) ... SUCCESS!
<- Run of asgn2.test.01 complete ----------

--------> Running asgn2.test.02 (GET a large binary file) ... SUCCESS!
<- Run of asgn2.test.02 complete ----------

--------> Running asgn2.test.03 (PUT a small binary file) ... SUCCESS!
<- Run of asgn2.test.03 complete ----------

--------> Running asgn2.test.04 (PUT a large binary file) ... SUCCESS!
<- Run of asgn2.test.04 complete ----------

--------> Running asgn2.test.05 (Test HEAD request for a proper response header with 200 (OK)) ... SUCCESS!
<- Run of asgn2.test.05 complete ----------

--------> Running asgn2.test.06 (Test for 400 with a bad HTTP version (HTTP 1.0)) ... SUCCESS!
<- Run of asgn2.test.06 complete ----------

--------> Running asgn2.test.07 (Test if server creates default number of threads (4 workers + main thread)) ... SUCCESS!
<- Run of asgn2.test.07 complete ----------

--------> Running asgn2.test.08 (Test if server can read optional arguments in any order (examples from spec)) ... SUCCESS!
<- Run of asgn2.test.08 complete ----------

--------> Running asgn2.test.09 (Test if server can handle multiple GET requests simultaneously) ... SUCCESS!
<- Run of asgn2.test.09 complete ----------

--------> Running asgn2.test.10 (Test if server can handle a GET, HEAD, and PUT request simultaneously) ... SUCCESS!
<- Run of asgn2.test.10 complete ----------

--------> Running asgn2.test.11 (Test if server can handle many requests greater than number of threads) ... SUCCESS!
<- Run of asgn2.test.11 complete ----------

--------> Running asgn2.test.12 (Test if server can log a single valid request) ... SUCCESS!
<- Run of asgn2.test.12 complete ----------

--------> Running asgn2.test.13 (Test if server truncates log files everytime it starts) ... SUCCESS!
<- Run of asgn2.test.13 complete ----------

--------> Running asgn2.test.14 (Test if server can log many valid requests sent simultaneously) ... SUCCESS!
<- Run of asgn2.test.14 complete ----------

--------> Running asgn2.test.15 (Test if server can log many valid and invalid requests (400) with multiple requests sent) ... failure!
stdout (first 0 characters):

====
stderr (first 200 characters):

====
<- Run of asgn2.test.15 complete ----------

--------> Running asgn2.test.16 (Test if server can log many valid and invalid requests (400 and 404) with multiple requests sent) ... failure!
stdout (first 0 characters):

====
stderr (first 200 characters):

====
<- Run of asgn2.test.16 complete ----------

--------> Running asgn2.test.17 (Test if a single HEAD request is logged correctly) ... SUCCESS!
<- Run of asgn2.test.17 complete ----------

--------> Running asgn2.test.18 (Test if server can handle multiple GET requests to the same resource simultaniously) ... SUCCESS!
<- Run of asgn2.test.18 complete ----------

--------> Running asgn2.test.19 (Test if server can handle multiple requests much larger (15:1 ratio) than the number of threads) ... SUCCESS!
<- Run of asgn2.test.19 complete ----------

--------> Running asgn2.test.20 (Check that logging can handle a broken first line.) ... failure!
stdout (first 0 characters):

====
stderr (first 200 characters):

====
<- Run of asgn2.test.20 complete ----------

-------- SCORES --------
what,total,asgn2.test.01,asgn2.test.02,asgn2.test.03,asgn2.test.04,asgn2.test.05,asgn2.test.06,asgn2.test.07,asgn2.test.08,asgn2.test.09,asgn2.test.10,asgn2.test.11,asgn2.test.12,asgn2.test.13,asgn2.test.14,asgn2.test.15,asgn2.test.16,asgn2.test.17,asgn2.test.18,asgn2.test.19,asgn2.test.20
MaxPoints,60,4,4,3,3,3,4,3,3,4,3,1,4,2,1,0,0,4,3,2,0
Score,51,4,4,3,3,3,4,3,3,4,3,1,4,2,1,0,0,4,3,2,0
-------- END_SCORES --------
